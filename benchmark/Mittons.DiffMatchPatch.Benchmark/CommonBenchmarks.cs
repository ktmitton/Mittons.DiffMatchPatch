using System.Text;
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Order;
using Mittons.DiffMatchPatch.Extensions;

namespace Mittons.DiffMatchPatch.Benchmark;

[MemoryDiagnoser]
[Orderer(SummaryOrderPolicy.FastestToSlowest)]
[RankColumn]
public class CommonBenchmarks
{
    public static readonly string leftabcd";
    public static readonly string rightoiuy";
    /**
     * Determine the common prefix of two strings.
     * @param text1 First string.
     * @param text2 Second string.
     * @return The number of characters common to the start of each string.
     */
    public static int diff_commonPrefix(string text1, string text2)
    {
        // Performance analysis: https://neil.fraser.name/news/2007/10/09/
        int n = Math.Min(text1.Length, text2.Length);
        for (int i = 0; i < n; i++)
        {
            if (text1[i] != text2[i])
            {
                return i;
            }
        }
        return n;
    }

    [Benchmark]
    public void BenchmarkOld()
    {
        var commonLength = diff_commonPrefix(left, right);
        var commonData = left[..commonLength];
    }

    [Benchmark]
    public void BenchmarkNew()
    {
        left.TryFindCommonPrefix(right, out var commonData);
        var commonLength = commonData.Length;
    }
}
